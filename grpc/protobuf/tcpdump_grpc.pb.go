// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: protobuf/tcpdump.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TCPDump_Start_FullMethodName = "/kockpit.v1.TCPDump/Start"
	TCPDump_Stop_FullMethodName  = "/kockpit.v1.TCPDump/Stop"
)

// TCPDumpClient is the client API for TCPDump service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TCPDumpClient interface {
	Start(ctx context.Context, in *TCPDumpRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TCPDumpResponse], error)
	Stop(ctx context.Context, in *TCPDumpRequest, opts ...grpc.CallOption) (*TCPDumpResponse, error)
}

type tCPDumpClient struct {
	cc grpc.ClientConnInterface
}

func NewTCPDumpClient(cc grpc.ClientConnInterface) TCPDumpClient {
	return &tCPDumpClient{cc}
}

func (c *tCPDumpClient) Start(ctx context.Context, in *TCPDumpRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TCPDumpResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TCPDump_ServiceDesc.Streams[0], TCPDump_Start_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TCPDumpRequest, TCPDumpResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TCPDump_StartClient = grpc.ServerStreamingClient[TCPDumpResponse]

func (c *tCPDumpClient) Stop(ctx context.Context, in *TCPDumpRequest, opts ...grpc.CallOption) (*TCPDumpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TCPDumpResponse)
	err := c.cc.Invoke(ctx, TCPDump_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TCPDumpServer is the server API for TCPDump service.
// All implementations must embed UnimplementedTCPDumpServer
// for forward compatibility.
type TCPDumpServer interface {
	Start(*TCPDumpRequest, grpc.ServerStreamingServer[TCPDumpResponse]) error
	Stop(context.Context, *TCPDumpRequest) (*TCPDumpResponse, error)
	mustEmbedUnimplementedTCPDumpServer()
}

// UnimplementedTCPDumpServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTCPDumpServer struct{}

func (UnimplementedTCPDumpServer) Start(*TCPDumpRequest, grpc.ServerStreamingServer[TCPDumpResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTCPDumpServer) Stop(context.Context, *TCPDumpRequest) (*TCPDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTCPDumpServer) mustEmbedUnimplementedTCPDumpServer() {}
func (UnimplementedTCPDumpServer) testEmbeddedByValue()                 {}

// UnsafeTCPDumpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TCPDumpServer will
// result in compilation errors.
type UnsafeTCPDumpServer interface {
	mustEmbedUnimplementedTCPDumpServer()
}

func RegisterTCPDumpServer(s grpc.ServiceRegistrar, srv TCPDumpServer) {
	// If the following call pancis, it indicates UnimplementedTCPDumpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TCPDump_ServiceDesc, srv)
}

func _TCPDump_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TCPDumpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TCPDumpServer).Start(m, &grpc.GenericServerStream[TCPDumpRequest, TCPDumpResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TCPDump_StartServer = grpc.ServerStreamingServer[TCPDumpResponse]

func _TCPDump_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TCPDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCPDumpServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TCPDump_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCPDumpServer).Stop(ctx, req.(*TCPDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TCPDump_ServiceDesc is the grpc.ServiceDesc for TCPDump service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TCPDump_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kockpit.v1.TCPDump",
	HandlerType: (*TCPDumpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _TCPDump_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _TCPDump_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/tcpdump.proto",
}
